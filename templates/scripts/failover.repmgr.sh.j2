#!/bin/bash

# Special values:
#   %d = failed node id
#   %h = failed node hostname
#   %p = failed node port number
#   %D = failed node database cluster path
#   %m = new master node id
#   %H = new master node hostname
#   %M = old master node id
#   %P = old primary node id
#   %r = new master port number
#   %R = new master database cluster path
#   %N = old primary node hostname
#   %S = old primary node port number
#   %% = '%' character
# ex input : 0 pgsql01 5432 /var/lib/postgresql/12/main 1 pgsql02 0 0 5432 /var/lib/postgresql/12/main pgsql01 5432

FAILED_NODE_ID="$1"
FAILED_NODE_HOST="$2"
FAILED_NODE_PORT="$3"
FAILED_NODE_PGDATA="$4"
NEW_MASTER_NODE_ID="$5"
NEW_MASTER_NODE_HOST="$6"
OLD_MASTER_NODE_ID="$7"
OLD_PRIMARY_NODE_ID="$8"
NEW_MASTER_NODE_PORT="$9"
NEW_MASTER_NODE_PGDATA="${10}"
OLD_PRIMARY_NODE_HOST="${11}"
OLD_PRIMARY_NODE_PORT="${12}"
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

(
date
echo "FAILED_NODE_ID: $FAILED_NODE_ID"
echo "FAILED_NODE_HOST: $FAILED_NODE_HOST"
echo "FAILED_NODE_PORT: $FAILED_NODE_PORT"
echo "FAILED_NODE_PGDATA: $FAILED_NODE_PGDATA"
echo "NEW_MASTER_NODE_ID: $NEW_MASTER_NODE_ID"
echo "NEW_MASTER_NODE_HOST: $NEW_MASTER_NODE_HOST"
echo "OLD_MASTER_NODE_ID: $OLD_MASTER_NODE_ID"
echo "OLD_PRIMARY_NODE_ID: $OLD_PRIMARY_NODE_ID"
echo "NEW_MASTER_NODE_PORT: $NEW_MASTER_NODE_PORT"
echo "NEW_MASTER_NODE_PGDATA: $NEW_MASTER_NODE_PGDATA"
echo "OLD_PRIMARY_NODE_HOST: $OLD_PRIMARY_NODE_HOST"
echo "OLD_PRIMARY_NODE_PORT: $OLD_PRIMARY_NODE_PORT"

echo "failover.sh: BEGIN - failed_node_id=${FAILED_NODE_ID} old_primary_node_id=${OLD_PRIMARY_NODE_ID} failed_host=${FAILED_NODE_HOST} new_master_host=${NEW_MASTER_NODE_HOST}"

## If there's no master node anymore, skip failover.
if [ ${NEW_MASTER_NODE_ID} -lt 0 ]; then
  echo "failover.sh: All nodes are down. Skipping failover."
  exit 0
fi

## Test passwordless SSH
ssh -T ${SSH_OPTS} ${NEW_MASTER_NODE_HOST} ls /tmp > /dev/null
if [ $? -ne 0 ]; then
  echo "failover.sh: passwordless SSH to postgres@${NEW_MASTER_NODE_HOST} failed. Please setup passwordless SSH."
  exit 1
fi

## Promote Standby node.
if [ ${FAILED_NODE_ID} = ${OLD_PRIMARY_NODE_ID} ] ; then
  echo "failover.sh: Primary node is down, promote standby node ${NEW_MASTER_NODE_HOST}."
  ssh ${SSH_OPTS} ${NEW_MASTER_NODE_HOST} "/usr/bin/repmgr standby promote -f /etc/repmgr.conf --log-to-file -v"
else
  echo "failover.sh: Old primary id is ${OLD_PRIMARY_NODE_ID} and falling node id is ${FAILED_NODE_ID}."
fi

echo "failover.sh: END - new_master_node_id=${NEW_MASTER_NODE_ID} started as the primary node."
exit 0;
) 2>&1 | tee -a {{ pgpool_logdir }}/pgpool.log
