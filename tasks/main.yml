---
- name: Load OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution_release }}.yml"
    - "{{ role_path }}/vars/empty.yml"
  tags: ['always']

- import_tasks: _apt.yml
  when: 
    - pgpool_apt_install | bool
    - not pgpool_build_sources | bool
  tags: ['apt']

- import_tasks: _source.yml
  when: 
    - not pgpool_apt_install | bool
    - pgpool_build_sources | bool

- name: Create pgpool group
  group:
    name: "{{ pgpool_group }}"
    state: present

- name: Ensure the user postgres is added the pgpool group
  user:
    name: postgres
    groups: "{{ pgpool_group }}"
    append: yes

- name: Hash pgpool_password_cleartext
  set_fact: 
    pgpool_password_hashed: "{{ pgpool_password_cleartext | password_hash('sha512') }}"

- name: Create pgpool user
  user:
    name: "{{ pgpool_user }}"
    shell: /bin/bash
    home: "{{ pgpool_home_directory }}"
    password: "{{ pgpool_password_hashed }}"
    update_password: always
    group: "{{ pgpool_group }}"

- name: Get pgpool-related binaries
  find:
    path: "{{ pgpool_binaries_directory }}"
    patterns: ['pcp_*', 'watchdog_*', 'pg_*']
  register: pg_binaries

- name: Update binaries permissions
  file:
    path: "{{ item.path }}"
    mode: 0777
  loop: "{{ pg_binaries.files }}"

- name: Update pgpool user's file permissions
  file:
    path: "{{ pgpool_home_directory }}"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    recurse: yes

- name: Allow passwordless restarts with pgpool user
  template:
    src: "sudoers.pgpool.j2"
    dest: "/etc/sudoers.d/{{ pgpool_user }}"

- name: Create socket/log directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  loop:
    - "{{ pgpool_socket_dir }}"
    - "{{ pgpool_pcp_socket_dir }}"
    - "{{ pgpool_wd_ipc_socket_dir }}"
    - "{{ pgpool_logdir }}"

- name: Create initial pgpool logfile
  file:
    path: "{{ pgpool_logdir }}/pgpool.log"
    mode: 0775
    state: touch
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"

- name: Populate service facts
  service_facts:

- name: Get pgpool2 service status
  set_fact:
    pgpool2_running: "{{ ansible_facts.services['pgpool2'].state == 'running' }}"

- name: Upload pgpool.conf
  template:
    src: pgpool.conf.j2
    dest: "{{ pgpool_home_directory }}/pgpool.conf"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  notify: reload pgpool2

- name: Upload pool_hba.conf
  template:
    src: pool_hba.conf.j2
    dest: "{{ pgpool_home_directory }}/pool_hba.conf"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  when: 
    - pgpool_enable_pool_hba | bool 
    - pgpool_pool_hba_entries | length > 0

- name: Upload pcp.conf
  shell:
    cmd: echo "pgpool:$(pg_md5 {{ pgpool_password_cleartext }})" > {{ pgpool_home_directory }}/pcp.conf
  become: yes
  become_user: "{{ pgpool_user }}"

- name: Upload .pcppass file
  template:
    src: pcppass.j2
    dest: "{{ pgpool_home_directory }}/.pcppass"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0600
  tags: ['pcppass']

- name: Upload .pgpass file for postgres user
  template:
    src: pgpass.j2
    dest: "{{ pgpool_postgresql_home_directory }}/.pgpass"
    owner: "{{ pgpool_postgresql_service_user }}"
    group: "{{ pgpool_postgresql_service_group }}"
    mode: 0600
    trim_blocks: no
  when: pgpool_pgpass_entries | length > 0
  tags: ['pgpass']

- name: Copy .bashrc
  copy:
    src: /etc/skel/.bashrc
    dest: "{{ pgpool_home_directory }}/.bashrc"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0600
    remote_src: yes
  tags: ['aliases']

- name: Upload .bash_aliases file
  template:
    src: bash_aliases.j2
    dest: "{{ pgpool_home_directory }}/.bash_aliases"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0600
  tags: ['aliases']

- name: Generate pool_passwd file using md5 auth method
  shell:
    cmd: |
      pg_md5 --md5auth --username={{ item.username }} {{ item.password }}
  loop: "{{ pgpool_passwd_users_md5 }}"
  when: pgpool_passwd_use_md5 | bool
  become_user: "{{ pgpool_user }}"
  tags: ['pool_passwd']

- name: Create logrotate configuration
  template:
    src: pgpool.logrotate.j2
    dest: /etc/logrotate.d/pgpool

- name: Update rsyslog configuration
  template:
    src: rsyslog.pgpool.conf.j2
    dest: /etc/rsyslog.d/pgpool.conf
  notify: restart rsyslog

- name: Copy failover script
  template:
    src: "{{ pgpool_failover_template }}"
    dest: "{{ pgpool_home_directory }}/failover.sh"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  when: pgpool_failover_command is defined and pgpool_failover_command
  tags: ['failover']

- name: Copy follow_master script
  template:
    src: "{{ pgpool_follow_master_template }}"
    dest: "{{ pgpool_home_directory }}/follow_master.sh"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  when: pgpool_follow_master_command is defined and pgpool_follow_master_command
  tags: ['follow']
