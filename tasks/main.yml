---
- name: Load OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ role_path }}/vars/{{ ansible_distribution_release }}.yml"
    - "{{ role_path }}/vars/empty.yml"
  tags: ['always']

- name: Install build dependencies
  apt:
    name: "{{ pgpool_apt_dependencies }}"
    state: present

- name: Create pgpool group
  group:
    name: "{{ pgpool_group }}"
    state: present

- name: Create pgpool user
  user:
    name: "{{ pgpool_user }}"
    shell: /bin/bash
    home: "{{ pgpool_root_directory }}/etc"
    password: "{{ pgpool_password }}"
    update_password: always
    group: "{{ pgpool_group }}"

- name: Download tar archive
  get_url:
    url: "http://www.pgpool.net/download.php?f=pgpool-II-{{ pgpool_version }}.tar.gz"
    dest: "/tmp/pgpool-{{ pgpool_version }}.tar.gz"
  register: pgpool_archive

- name: Ensure build and destination directory exists
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  loop:
    - "{{ pgpool_build_directory }}"
    - "{{ pgpool_root_directory }}"
    - "{{ pgpool_logdir }}"

- name: Extract archive
  unarchive:
    src: "{{ pgpool_archive.dest }}"
    dest: "{{ pgpool_build_directory }}"
    remote_src: yes
    extra_opts: 
      - --strip-components=1

- name: Build pgpool
  shell:
    cmd: |
      ./configure {{ pgpool_build_opts }}
      make -j{{ ansible_processor_cores }} >/dev/null 2>&1
      make install
    chdir: "{{ pgpool_build_directory }}"

- name: Get pgpool-related binaries
  find:
    path: /usr/local/bin
    patterns: ['pcp_*', 'watchdog_*', 'pg_*']
  register: pg_binaries

- name: Update binaries permissions
  file:
    path: "{{ item.path }}"
    mode: 0777
  loop: "{{ pg_binaries.files }}"

- name: Update config files' permissions
  file:
    path: "{{ pgpool_root_directory }}/etc"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"

- name: Create socket directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775
  loop:
    - "{{ pgpool_socket_dir }}"
    - "{{ pgpool_pcp_socket_dir }}"
    - "{{ pgpool_wd_ipc_socket_dir }}"

- name: Upload pgpool.conf
  template:
    src: pgpool.conf.j2
    dest: "{{ pgpool_root_directory }}/etc/pgpool.conf"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775

- name: Upload pcp.conf
  template:
    src: pcp.conf.j2
    dest: "{{ pgpool_root_directory }}/etc/pcp.conf"
    owner: "{{ pgpool_user }}"
    group: "{{ pgpool_group }}"
    mode: 0775

- name: Generate pool_passwd file using md5 auth method
  shell:
    cmd: |
      /usr/local/bin/pg_md5 --md5auth --username={{ item.username }} {{ item.password }}
  loop: "{{ pgpool_passwd_users_md5 }}"
  when: pgpool_passwd_use_md5 | bool
  become_user: "{{ pgpool_user }}"
  tags: ['pool_passwd']

- name: Create logrotate configuration
  template:
    src: pgpool.logrotate.j2
    dest: /etc/logrotate.d/pgpool
